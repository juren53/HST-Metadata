#!/usr/bin/env python3
"""
Test script to check how well ftfy handles the encoding artifacts found in your CSV.
"""

try:
    from ftfy import fix_text
    FTFY_AVAILABLE = True
except ImportError:
    FTFY_AVAILABLE = False
    print("‚ùå ftfy not available. Please run: pip install ftfy")
    exit(1)

def test_artifacts():
    """Test various encoding artifacts."""
    
    test_cases = [
        # Original artifacts from your CSV
        ("Ca‚îú¬°dos", "Ca√≠dos"),
        ("Revoluci‚îú‚îÇn", "Revoluci√≥n"),
        ("dise‚îú‚ñío", "dise√±o"),
        ("M‚îú‚åêndez", "M√©ndez"),
        ("‚îú<81>valos", "√Åvalos"),
        ("M‚îú‚åêmorial", "M√©morial"),
        ("Fran‚îú¬∫ais", "Fran√ßais"),
        ("fran‚îú¬∫‚îú‚åê", "fran√ßais"),
        ("Lalwizy‚îú√°n", "Lalwizyan"),
        ("f‚îú‚ïùr", "f√ºr"),
        ("G‚îú√±nge", "G√§nge"),
        
        # Individual characters
        ("‚îú¬°", "√≠"),
        ("‚îú‚îÇ", "√≥"),
        ("‚îú‚ñí", "√±"),
        ("‚îú‚åê", "√©"),
        ("‚îú¬∫", "√∫"),
        ("‚îú‚ïù", "√º"),
        ("‚îú√±", "√§"),
    ]
    
    print("üß™ Testing ftfy on encoding artifacts")
    print("=" * 50)
    
    ftfy_success = 0
    total_tests = len(test_cases)
    
    for broken_text, expected_text in test_cases:
        fixed_text = fix_text(broken_text)
        success = fixed_text == expected_text
        
        if success:
            ftfy_success += 1
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"{status} '{broken_text}' ‚Üí '{fixed_text}' (expected: '{expected_text}')")
    
    print(f"\nüìä Results:")
    print(f"‚úÖ ftfy fixed: {ftfy_success}/{total_tests} ({ftfy_success/total_tests*100:.1f}%)")
    print(f"‚ùå Still broken: {total_tests - ftfy_success}/{total_tests}")
    
    if ftfy_success == total_tests:
        print("\nüéâ ftfy handles all your artifacts perfectly!")
        print("You may not need the manual artifact table anymore.")
    elif ftfy_success > total_tests * 0.8:
        print(f"\nüëç ftfy handles most artifacts well ({ftfy_success/total_tests*100:.1f}%).")
        print("The manual table provides good backup for the rest.")
    else:
        print(f"\n‚ö†Ô∏è  ftfy only handles {ftfy_success/total_tests*100:.1f}% of artifacts.")
        print("The manual artifact table is still important.")

if __name__ == "__main__":
    test_artifacts()
