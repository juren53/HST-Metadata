#!/usr/bin/env python3

import sys
from g2c import smart_encoding_cleaner, clean_encoding_artifacts

def test_encoding_fixes():
    """Test that our encoding artifact fixes work correctly."""
    
    print("Testing encoding artifact cleaning...")
    print("=" * 50)
    
    # Test cases based on the artifacts we found in the original export.csv
    test_cases = [
        # Spanish artifacts
        ("CaA-dos", "Ca√≠dos"),
        ("RevoluciA3n", "Revoluci√≥n"), 
        ("diseA¬±o", "dise√±o"),
        ("MAcndez", "M√©ndez"),
        ("A?valos", "√Åvalos"),
        
        # French artifacts
        ("MAcmorial", "M√©morial"),
        ("FranAais", "Fran√ßais"),
        
        # German artifacts
        ("fA¬ºr", "f√ºr"),
        ("GAnge", "G√§nge"),
        
        # Current artifacts mentioned by user (2025-01-21)
        ("T‚îú‚ï¢tung", "T√∂tung"),
        ("G‚îú√±nge", "G√§nge"),
        ("f‚îú‚ïùr", "f√ºr"),
        
        # Current export.csv artifacts
        ("√©cession", "Accession"),
        ("√©heson", "Acheson"),
        ("√§derson", "Anderson"),
        ("√§nouncement", "Announcement"),
        ("√§thony", "Anthony"),
        ("√©tg", "Acting"),
        ("√§drey", "Andrey"),
        ("√©ademy", "Academy"),
        ("355√≠7", "355A-7"),
        
        # Individual pattern tests
        ("CaA-dos example text", "Ca√≠dos example text"),
        ("Test RevoluciA3n story", "Test Revoluci√≥n story"),
        ("The diseA¬±o was great", "The dise√±o was great"),
        ("MAcndez family", "M√©ndez family"),
        ("A?valos street", "√Åvalos street"),
        ("MAcmorial building", "M√©morial building"),
        ("FranAais language", "Fran√ßais language"),
        ("fA¬ºr Germany", "f√ºr Germany"),
        ("Long GAnge path", "Long G√§nge path"),
    ]
    
    print("Testing clean_encoding_artifacts function:")
    print("-" * 45)
    
    all_passed = True
    for input_text, expected in test_cases:
        result = clean_encoding_artifacts(input_text)
        status = "‚úì PASS" if result == expected else "‚úó FAIL"
        
        if result != expected:
            all_passed = False
            
        print(f"{status}: '{input_text}' ‚Üí '{result}'")
        if result != expected:
            print(f"       Expected: '{expected}'")
    
    print("\n" + "=" * 50)
    print("Testing smart_encoding_cleaner function:")
    print("-" * 45)
    
    for input_text, expected in test_cases:
        result = smart_encoding_cleaner(input_text)
        status = "‚úì PASS" if result == expected else "‚úó FAIL"
        
        if result != expected:
            all_passed = False
            
        print(f"{status}: '{input_text}' ‚Üí '{result}'")
        if result != expected:
            print(f"       Expected: '{expected}'")
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ All encoding tests PASSED!")
        print("The encoding artifact cleaning is working correctly.")
    else:
        print("‚ö†Ô∏è Some encoding tests FAILED!")
        print("The encoding cleaning may need additional improvements.")
    
    print("\nNote: This demonstrates that our encoding fixes now handle")
    print("the artifacts that were found in the original export.csv file.")

if __name__ == "__main__":
    test_encoding_fixes()
